<% content_for :head do %>
<%= stylesheet_link_tag "dashboard" %>
<%= javascript_include_tag "dashboard" %>
<%= javascript_include_tag "json2.min" %>
<script src="<%= url_for(:controller => 'main', :action => 'gettext', :format => 'js') %>" type="text/javascript"></script>
<% end %>
<script type="text/javascript">

/*

cluster data structure is mini cib + mon_node:

  mon_node: string
  errors: array
  meta: hash
  node_list: array
  nodes_label: string
  node_states: hash (by state)
  resources_label: string
  resource_states: hash (by state)
  ticket_states: hash (by state)

- adding a cluster, we've already contacted it

- in either case each cluster object needs refresh logic
  - but it has a head-start from an added cluster

*/

(function($) {
  $.widget("ui.cluster", {
    options: {
      name: "",
      cluster: {}
    },
    _create: function() {
      var e = this.element;
      e.addClass("cluster ui-corner-all");
      e.append($(
        '<div style="float: right;"><button type="button" style="border: none; background: none; font-size: 0.7em; margin-right: -0.5em;"><%=h escape_javascript _('Remove') %></button></div>' +
        '<h1 class="clickable"></h1>' +
        '<h2 class="mon-warning" style="display: none;"></h2>' +
        '<h2 class="cluster-error clickable" style="display: none;"><span style="float: left;" class="ui-icon ui-icon-alert"></span><%=h escape_javascript _("Cluster has errors - click for details") %></h2>' +
        '<div class="summary ticketsum">' +
          '<h2 class="clickable">' + GETTEXT.tickets() + '</h2>' +
          '<table cellpadding="0" cellspacing="0" style="white-space: nowrap;">' +
            '<tr class="ticketsum-granted rs-active clickable"><td><span style="float: left;" class="ui-icon ui-icon-check"></span>' + GETTEXT.ticket_granted() + ':</td><td class="ar"></td></tr>' +
            '<tr class="ticketsum-revoked rs-inactive clickable"><td><span style="float: left;" class="ui-icon ui-icon-cancel"></span>' + GETTEXT.ticket_revoked() + ':</td><td class="ar"></td></tr>' +
          '</table>' +
        '</div>' +
        '<div class="summary nodesum">' +
          '<h2 class="clickable nodesum-label"></h2>' +
          '<table cellpadding="0" cellspacing="0">' +
            '<tr class="nodesum-pending ns-transient clickable" style="display: none;"><td><span style="float: left;" class="ui-icon ui-icon-refresh"></span>' + GETTEXT.node_state_pending() + ':</td><td class="ar"></td></tr>' +
            '<tr class="nodesum-online ns-active clickable" style="display: none;"><td><span style="float: left;" class="ui-icon ui-icon-play"></span>' + GETTEXT.node_state_online() + ':</td><td class="ar"></td></tr>' +
            '<tr class="nodesum-standby ns-inactive clickable" style="display: none;"><td><span style="float: left;" class="ui-icon ui-icon-pause"></span>' + GETTEXT.node_state_standby() + ':</td><td class="ar"></td></tr>' +
            '<tr class="nodesum-offline ns-inactive clickable" style="display: none;"><td><span style="float: left;" class="ui-icon ui-icon-stop"></span>' + GETTEXT.node_state_offline() + ':</td><td class="ar"></td></tr>' +
            '<tr class="nodesum-unclean ns-error clickable" style="display: none;"><td><span style="float: left;" class="ui-icon ui-icon-notice"></span>' + GETTEXT.node_state_unclean() + ':</td><td class="ar"></td></tr>' +
          "</table>" +
        "</div>" +
        '<div class="summary ressum">' +
          '<h2 class="clickable ressum-label"></span></h2>' +
          '<table cellpadding="0" cellspacing="0">' +
            '<tr class="ressum-pending rs-transient clickable" style="display: none;"><td><span style="float: left;" class="ui-icon ui-icon-refresh"></span>' + GETTEXT.resource_state_pending() + ':</td><td class="ar"></td></tr>' +
            '<tr class="ressum-started rs-active clickable" style="display: none;"><td><span style="float: left;" class="ui-icon ui-icon-play"></span>' + GETTEXT.resource_state_started() + ':</td><td class="ar"></td></tr>' +
            '<tr class="ressum-master rs-master clickable" style="display: none;"><td><span style="float: left;" class="ui-icon ui-icon-play"></span>' + GETTEXT.resource_state_master() + ':</td><td class="ar"></td></tr>' +
            '<tr class="ressum-slave rs-slave clickable" style="display: none;"><td><span style="float: left;" class="ui-icon ui-icon-play"></span>' + GETTEXT.resource_state_slave() + ':</td><td class="ar"></td></tr>' +
            '<tr class="ressum-stopped rs-inactive clickable" style="display: none;"><td><span style="float: left;" class="ui-icon ui-icon-stop"></span>' + GETTEXT.resource_state_stopped() + ':</td><td class="ar"></td></tr>' +
          "</table>" +
        "</div>"));
    },
    _init: function() {
      var self = this;
      var e = self.element;
      self.req = null;
      self.cur_epoch = "";
      e.find("h1").html(escape_html(self.options.name));
      e.find(".clickable").click(function() {
        window.open("https://" + self.options.cluster.mon_node + ":7630/",
          "_hawk_" +self.options.name.replace(/[^A-Za-z0-9_]/g, ""));
        return false;
      });
      e.find("button").button({
        text: false,
        icons: {
          primary: "ui-icon-close"
        }
      }).click(function() {
        // TODO(must): prompt for cluster removal
        remove_cluster(self.options.name);
        self.element.remove();
      });
      self._redraw();
      self.do_update();
    },
    abort_req: function() {
      if (this.req && this.req.abort) { this.req.abort(); }
    },
    do_update: function() {
      var self = this;
      self.abort_req();
      self.req = $.ajax({ url: "https://" + self.options.cluster.mon_node + ":7630/monitor?" + self.cur_epoch,
        timeout: 90000,
        dataType: "json",   // necessary?
        type: "GET",
        cross_domain_hack: true,    // needed to get proper headers
        success: function(data) {
          // Note: success fires even on request failure
          if (data) {
            self.element.find(".mon-warning").hide();
            if (data.cur_epoch != self.cur_epoch) {
              self.update_cib();
            } else {
              self.do_update(data.cur_epoch);
            }
          } else {
            self._cycle_mon_node();
          }
        }
      });
    },
    update_cib: function() {
      var self = this;
      self.abort_req();
      self.req = $.ajax({ url: "https://" + self.options.cluster.mon_node + ":7630/cib/live",
        timeout: 90000,
        data: "format=json&mini=true",
        dataType: "json",   // necessary?
        type: "GET",
        cross_domain_hack: true,    // needed to get proper headers
        success: function(data) {
          // Note: success fires even on request failure
          self.cur_epoch = "";
          if (data) {
            self.element.find(".mon-warning").hide();
            var mn = self.options.cluster.mon_node; // this is silly
            // !! might not have cib.meta
            self.options.cluster = data;
            self.options.cluster.mon_node = mn;
            clusters[self.options.name] = self.options.cluster;   // TODO(should): Again with the baroque (*sheesh*)
            save_clusters();                                      // TODO(should): only if node_list changed
            self._redraw();
            self.cur_epoch = data.meta.epoch;
            self.do_update();
          } else {
            self._cycle_mon_node();
          }
        }
      });
    },
    _redraw: function() {
      var e = this.element;
      if (this.options.cluster.errors && this.options.cluster.errors.length > 0) {
        e.find(".cluster-error").show();
      } else {
        e.find(".cluster-error").hide();
      }
      if (!this.options.cluster.nodes_label || !this.options.cluster.node_states ||
          !this.options.cluster.resources_label || !this.options.cluster.resource_states ||
          !this.options.cluster.ticket_states) {
        // If we have no CIB yet, we'll still show the cluster name
        // TODO(should): Put a spinner or similar
        e.find(".ticketsum").hide();
        e.find(".nodesum").hide();
        e.find(".ressum").hide();
        return;
      }
      var nsl = e.find(".nodesum-label");
      nsl.html(escape_html(this.options.cluster.nodes_label));
      nsl.attr("title", this.options.cluster.node_list.join(", "));
      this._redraw_counters(this.options.cluster.node_states, ".nodesum-");
      e.find(".nodesum").show();
      e.find(".ressum-label").html(escape_html(this.options.cluster.resources_label));
      this._redraw_counters(this.options.cluster.resource_states, ".ressum-");
      e.find(".ressum").show();
      this._redraw_counters(this.options.cluster.ticket_states, ".ticketsum-");
      if (this.options.cluster.ticket_states.granted > 0 || this.options.cluster.ticket_states.revoked > 0) {
        e.find(".ticketsum").show();
      } else {
        e.find(".ticketsum").hide();
      }
    },
    _redraw_counters: function(hash, prefix) {
      var e = this.element;
      $.each(hash, function(k, v) {
        var r = e.find(prefix + k);
        r.children(":last").text(v);
        if (parseInt(v)) {
          r.show();
        } else {
          r.hide();
        }
      });
    },
    _cycle_mon_node: function(monitor) {
      var self = this;
      var w = self.element.find(".mon-warning");
      w.html("<%=h escape_javascript _("Can't contact Hawk on %{node}. Retrying every 5 seconds.") % { :node => '_NODE_' } %>".replace('_NODE_', this.options.cluster.mon_node));
      w.show();
      var nl = self.options.cluster.node_list;
      if (nl && nl.length) {
        var nn = self.options.cluster.node_list[0];
        for (var i = nl.length - 1; i >= 0; i--) {
          if (nl[i] == self.options.cluster.mon_node) {
            self.options.cluster.mon_node = nn;
            break;
          } else {
            nn = nl[i];
          }
        }
      }
      setTimeout(function() { self.update_cib(); }, 5000);
    },
    destroy: function() {
      this.abort_req();
      $.Widget.prototype.destroy.apply(this, arguments);
    }
  });
})(jQuery);

var clusters = {};
var adding_cluster = false;

function save_clusters() {
  // Only want to save minimal info; name, node_list and mon_node
  var s = {};
  $.each(clusters, function(n, c) {
    s[n] = { node_list: c.node_list, mon_node: c.mon_node };
  });
  $.cookie("hawk-dashboard", JSON.stringify(s), { expires: 3650 });
}

function insert_cluster(n) {
  // The way this insert_cluster thing works is a bit overly baroque
  if (!clusters[n]) return;
  $("#clusters").append($("<div/>").cluster({name: n, cluster: clusters[n]}));
  // because this is called on page load it ought to reset the cookie expiry,
  // but yeah, too baroque...
  save_clusters();
}

function remove_cluster(n) {
  delete clusters[n];
  save_clusters();
}

function add_cluster() {
  var html = '<form onsubmit="return false;"><table>' +
    '<tr><th><%=h escape_javascript _('Cluster Name:') %></th><td><input type="text" id="new-cluster-name" /></td></tr>' +
    '<tr><th><%=h escape_javascript _('Host Name:') %></th><td><input type="text" id="new-cluster-host" /></td></tr>' +
    '<tr><td colspan="2" style="font-size: 80%"><%=h escape_javascript("(Specify any host name in the cluster.  Other nodes will be found automatically)") %></td></tr>' +
    '</table><form>';

  $("#dialog").html(html);
  $("#dialog").dialog("option", {
    title:    "<%=h escape_javascript _('Add Cluster') %>",
    buttons:  {
      "<%=h escape_javascript _('OK') %>": function() {
        var self = this;

        // Flag prevents double-hit ENTER key from triggering duplicate add
        if (adding_cluster) return;

        var cn = $.trim($("#new-cluster-name").val());
        var hn = $.trim($("#new-cluster-host").val());
        // TODO(must): hostname must be valid (no weird/specical characters)
        if (!cn || !hn) {
          // TODO(should): Error message
          return;
        }

        if (clusters[cn]) {
          alert("<%=h escape_javascript _('A cluster with that name already exists') %>");
          return;
        }

        var existing = null;
        $.each(clusters, function(n) {
          if ($.inArray(hn, this.node_list) >= 0) {
            existing = n;
            return false;
          }
        });
        if (existing) {
          alert("<%=h escape_javascript _('The host %{h} is already present in cluster %{c}') % { :h => '_HOST_', :c => '_CLUSTER_' } %>".replace('_HOST_', hn).replace('_CLUSTER_', existing));
          return;
        }

        // now ajax to the host specified and:
        // - no connection - host not found error / can't connect
        // - if permission denied, request login
        // - if ok, add cluster
        // what about https cert verification?

        // internet explorer is an evil pain

        // Disable buttons for request duration
        $(self).dialog().parent().find(".ui-dialog-buttonpane button").attr("disabled", "disabled");
        // TODO(should): show spinner?
        adding_cluster = true;

        var req = $.ajax({ url: "https://" + hn + ":7630/cib/live",
          timeout:  20000,
          data: "format=json&mini=true",
          dataType: "json",   // necessary?
          type: "GET",
          cross_domain_hack: true,    // needed to get proper headers
          success: function(data, status, xhr) {
            if (!data) {
              // apparently I can't differentiate a broken/illegal CORS
              // request from other types of failure.  FFS.
              alert("Host not found or some other problem");
            } else {
              clusters[cn] = data;
              clusters[cn].mon_node = hn;
              insert_cluster(cn);
              $(self).dialog("close");
            }
            adding_cluster = false;
            $(self).dialog().parent().find(".ui-dialog-buttonpane button").removeAttr("disabled");
          },
          error: function(request) {
            if (request.readyState > 1) {
              if (request.status == 403) {
                alert("Permission denied");
              } else {
                var json = json_from_request(request);
                if (json && json.errors) {
                  alert(json);
                } else {
                  if (request.status >= 10000) {
                    alert("FIXME: some sort of IE connection error");
                  } else {
                    alert(request.status + " " + request.statusText);
                  }
                }
              }
            } else {
              // timeout
              alert("timeout");
            }
            adding_cluster = false;
            $(self).dialog().parent().find(".ui-dialog-buttonpane button").removeAttr("disabled");
          }
        });
      },
      "<%=h escape_javascript _('Cancel') %>": function() {
        $(this).dialog("close");
      }
    },
    open: function() {
      var self = this;
      $(self).find("form").keypress(function(e) {
        if (e.keyCode == 13) {
          // Allow enter to submit dialog
          $(self).parent().find('.ui-dialog-buttonpane button:first').click();
          return false;
        }
      });
    }
  });
  $("#dialog").dialog("open");
}

$(function() {
  if ($.cookie("hawk-dashboard")) {
    clusters = JSON.parse($.cookie("hawk-dashboard"));
    $.each(clusters, function(n) {
      insert_cluster(n);
    });
  }
  if ($.isEmptyObject(clusters)) {
    add_cluster();
  }
});
</script>
<div id="clusters"></div>
<form onsubmit="return false;"><button onclick="add_cluster();">+</button></form>

