<% content_for :head do %>
<!-- extra head content here -->
<% end %>

<%= render :partial => 'summary' %>

<div<%= ' style="display: none"' unless @summary[:stack] %>>
  <% # TODO: this is rough as guts - for another approach see
     # http://www.kleenecode.net/2008/03/01/valid-and-accessible-collapsible-panels-with-scriptaculous/
  %>
  <div style="cursor: pointer;" onclick="toggle_collapse('nodelist');"><div id="nodelist::button" class="tri-<%= if @expand_nodes then 'open' else 'closed' end %>"></div><%= _('<span id="nodecount">%d</span> nodes configured') % @nodes.count %></div>
  <div id="nodelist"<%= ' style="display: none;" class="closed"' unless @expand_nodes %>>
  <% for node in @nodes %>
  <%= render :partial => 'node', :locals => { :node => node } %>
  <% end %>
  </div>
</div>

<div<%= ' style="display: none"' unless @summary[:stack] %>>
  <div style="cursor: pointer;" onclick="toggle_collapse('reslist');"><div id="reslist::button" class="tri-<%= if @expand_resources then 'open' else 'closed' end %>"></div><%= _('<span id="rescount">%d</span> resources configured') % @resources.count %></div>
  <div id="reslist"<%= ' style="display: none;" class="closed"' unless @expand_resources %>>
  <% for res in @resources %>
  <%= render :partial => res[:restype], :locals => { :res => res } %>
  <% end %>
  </div>
</div>

<script type="text/javascript">
/*
  OK, so we've got the following areas we need to update:
  
  [         error bar        ]
  [node list]        [summary]
  [resource list]

  Any/all of this stuff may be empty.  If it's empty, it's
  invisible.  (zero nodes == don't show that box at all,
  likewise resources, etc.)
  
  Summary is easy; the list of properties doesn't change, only the
  values.  We have:
  
    stack
    dc-version
    dc-node
    default-resource-stickiness (integer)
    stonith-enabled (true/false, but false should go scary red)
    symmetric-cluster (true/false)
    no-quorum-policy (string)
    
  Everything else is tricky, because we have to insert/delete pieces (maybe).

  That's somewhat OK for nodes and resources, because everything will have a
  unique identifier (so worst case we can walk through what's there and add
  or remove as necessary (although it's a shame to have somewhat duplicated
  HTML generation in RoR templates and JS.  Come on, *someone* must have solved
  this one years ago...  *sigh*)

  Trickier for errors; would need semi-persistent list of current errors.
  Actually, we want that anyway, so that they're dismissable...  But for now,
  let's just blat out the whole section.

*/


// returns true if auto-expand required
function update_node(node) {
  if (!$("node-" + node.uname).hasClassName("ns-" + node.state)) {
    $("node-" + node.uname).className = "node ns-" + node.state;
    $("node-" + node.uname + "::state").update(node.state);
    // doesn't *quite* work; background color reverts to prior, not new, color
    //new Effect.Highlight($("node-" + node.uname));
    // If the node state has changed and it's no longer online, expand the node list
    if (node.state != "online") {
      return true;
    }
  }
  return false;
}

function update_nodes(nodelist) {
  var expand = false;
  var c = $("nodelist").firstDescendant();
  nodelist.each(function(n) {
    id = "node-" + n.uname;
    if (!c || c.readAttribute("id") != id) {
      var d;
      if ($(id)) {
        // already got one for this node, tear it out and reuse it.
        d = $(id).remove();
      } else {
        // brand spanking new
        d = $(document.createElement("div")).writeAttribute("id", id).addClassName("node");
        // TODO: n.state might not be HTML-safe (yeah, right...)
        d.update(n.uname + ': <span id="node-' + n.uname + '::state">' + n.state + '</span>');
      }
      if (!c) {
        $("nodelist").insert(d);
      } else {
        c.insert({before: d});
      }
    } else {
      c = c.next();
    }
    if (update_node(n)) {
      expand = true;
    }
  });
  // If there's any children left, get rid of 'em
  while (c) {
    var nc = c.next();
    c.remove();
    c = nc;
  }
  $("nodecount").update(nodelist.size());
  return expand;
}

// returns true if auto-expand required
function update_primitive(prim) {
  var class = prim.running_on.length ? "rs-running" : "rs-stopped";
  // Always set state string (might be running on a different host)
  $("primitive-" + prim.id + "::state").update(prim.running_on.length ? "<%=h _('Started: ') %>" + prim.running_on.join(', ') : "<%=h _('Stopped') %>");
  if (!$("primitive-" + prim.id).hasClassName(class)) {
    $("primitive-" + prim.id).className = "res-primitive " + class;
    // doesn't *quite* work; background color reverts to prior, not new, color (also doesn't flash migrations)
    // new Effect.Highlight($("primitive-" + prim.id));
    // State changed, and not running anymore, need to expand everything above it...
    if (prim.running_on.length == 0) {
      return true;
    }
  }
  return false;
}

// TODO: suspiciously similar to update_nodes function; consolidate these
function update_resources(reslist, parent) {
  var expand = false;
  if (!parent) {
    parent = $("reslist");
    $("rescount").update(reslist.size());
  }
  var c = parent.firstDescendant();
  reslist.each(function(res) {
    id = res.restype + "-" + res.id;
    if (!c || c.readAttribute("id") != id) {
      var d;
      if ($(id)) {
        // already got one for this resource, tear it out and reuse it.
        d = $(id).remove();
      } else {
        // brand spanking new
        switch (res.restype) {
          case 'group':
            d = $(document.createElement("div")).writeAttribute("id", id).addClassName("res-group");
            // TODO: localize "Group"
            // TODO: res.id not HTML safe
            // TODO: children::button is unbelievably wrong
            d.update('<div style="cursor: pointer;" onclick="toggle_collapse(\'group-' + res.id + '::children\');"><div id="group-' + res.id + '::children::button" class="tri-closed"></div>Group: ' + res.id + '</div></div><div id="group-' + res.id + '::children" style="display:none;" class="closed"></div>');
            break;
          case 'clone':
            d = $(document.createElement("div")).writeAttribute("id", id).addClassName("res-clone");
            // TODO: localize "Clone Set"
            // TODO: res.id not HTML safe
            // TODO: children::button is unbelievably wrong
            d.update('<div style="cursor: pointer;" onclick="toggle_collapse(\'clone-' + res.id + '::children\');"><div id="clone-' + res.id + '::children::button" class="tri-closed"></div>Clone Set: ' + res.id + '</div></div><div id="clone-' + res.id + '::children" style="display:none;" class="closed"></div>');
            break;
          case 'primitive':
            d = $(document.createElement("div")).writeAttribute("id", id).addClassName("res-primitive");
            d.update(res.id + ': <span id="primitive-' + res.id + '::state"></span>');
            break;
        }
      }
      if (!c) {
        parent.insert(d);
      } else {
        c.insert({before: d});
      }
    } else {
      c = c.next();
    }
    if (res.children) {
      if (update_resources(res.children, $(res.restype + '-' + res.id + '::children'))) {
        if ($(res.restype + "-" + res.id + "::children").hasClassName("closed")) {
          expand_block(res.restype + "-" + res.id + "::children");
        }
        expand = true;
      }
    } else if (res.restype == 'primitive') {
      if (update_primitive(res)) {
        expand = true;
      }
    }
  });
  // If there's any children left, get rid of 'em
  while (c) {
    var nc = c.next();
    c.remove();
    c = nc;
  }
  return expand;
}

function update_summary(summary) {
  if (summary.stack) {
    for (var e in summary) {
      $("summary::" + e).update(summary[e]);
    }
    $("summary").show();
  } else {
    $("summary").hide();
  }
}

function update_errors(errors) {
  $("errorbar").update("");
  errors.each(function(e) {
    $("errorbar").insert($(document.createElement("div")).addClassName('error').update(e));
  });
}

// TODO: Um...  what's "object" for?
function handle_update(request, object) {
  if (request.responseJSON) {
    update_errors(request.responseJSON.errors);
    update_summary(request.responseJSON.summary);
    
    if (request.responseJSON.summary.stack) {
      $($("nodelist").parentNode).show();
      $($("reslist").parentNode).show();
      if (update_nodes(request.responseJSON.nodes)) {
        if ($("nodelist").hasClassName("closed")) {
          expand_block("nodelist");
        }
      }
      if (update_resources(request.responseJSON.resources)) {
        if ($("reslist").hasClassName("closed")) {
          expand_block("reslist");
        }
      }
    } else {
      $($("nodelist").parentNode).hide();
      $($("reslist").parentNode).hide();
    }
  }
  do_update();
}

function do_update() {
  setTimeout("new Ajax.Request('/main/status', { parameters: 'format=json', asynchronous: true, onComplete: handle_update });", 15000);
}

Event.observe(window, 'load', function() { do_update(); });

</script>

