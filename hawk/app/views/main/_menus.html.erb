<div id="menu::node" style="display: none;"></div>
<div id="menu::reslist" style="display: none;"></div>
<div id="menu::resource" style="display: none;"></div>
<div id="menu::cluster" style="display: none;"></div>
<script type="text/javascript">
$(function() {
  $(jq("menu::node")).popupmenu({ iconroot: url_root + "/images/icons/", items: [
    {
      label: "<%=h escape_javascript _('Online') %>",
      icon: "start.png",
      click: function(target) {
        confirm_op(this.label, item_id(target.attr("id")), "node", "online");
      }
    },
    {
      label: "<%=h escape_javascript _('Standby') %>",
      icon: "pause.png",
      click: function(target) {
        confirm_op(this.label, item_id(target.attr("id")), "node", "standby");
      }
    },
    {
      label: "<%=h escape_javascript _('Fence Node') %>",
      icon: "kill.png",
      click: function(target) {
        confirm_op(this.label, item_id(target.attr("id")), "node", "fence");
      }
    },
    {
      separator: true
    },
    {
      label: "<%=h escape_javascript _('View Details...') %>",
      icon: "details.png",
      click: function(target) {
        $("#dialog").html('<div style="text-align: center;">' +
          '<img src="' + url_root + '/images/spinner-32x32.gif" alt="" /></div>');
        $("#dialog").load(url_root + "/cib/" + (cib_file ? cib_file : "live") + "/nodes/" + item_id(target.attr("id")));
        var b = {};
        b[GETTEXT.close()]   = function() { $(this).dialog("close"); }
        $("#dialog").dialog("option", {
          title:    parts[1],
          buttons:  b
        });
        $("#dialog").dialog("open");
      }
    }
    <% if has_feature?(:crm_history) && is_god? %>
    ,
    {
      label: "<%=h escape_javascript _('View Recent Events...') %>",
      icon: "details.png",
      click: function(target) {
        $("#dialog").html('<div style="text-align: center;">' +
          '<img src="' + url_root + '/images/spinner-32x32.gif" alt="" /></div>');
        $("#dialog").load(url_root + "/cib/" + (cib_file ? cib_file : "live") + "/nodes/" + item_id(target.attr("id")) + "/events");
        var b = {};
        b[GETTEXT.close()]   = function() {
          if ($(this).dialog("option", "draggable")) {
            // Reset dialog, but only if it's been changed by the history viewer
            // (if we do this unconditionally, resetting draggable: false triggers
            // "uncaught exception: cannot call methods on draggable prior to
            // initialization; attempted to call method 'destroy'")
            $(this).dialog("option", {
              width: "30em",
              height: "auto",
              position: "center",
              resizable: false,
              draggable: false
            });
          }
          var req = $(this).data("req");
          if (req) req.abort();
          $(this).dialog("close");
        }
        $("#dialog").dialog("option", {
          title:    parts[1],
          buttons:  b
        });
        $("#dialog").dialog("open");
      }
    }
    <% end %>
  ]});
  $(jq("menu::reslist")).popupmenu({ iconroot: url_root + "/images/icons/", items: [
    {
      label: "<%=h escape_javascript _('Setup Wizard') %>",
      icon: "wizard.png",
      click: function(target) {
        window.location.assign(url_root + "/wizard");
      }
    },
    {
      separator: true
    },
    {
      label: "<%=h escape_javascript _('New Primitive') %>",
      icon: "add.png",
      click: function(target) {
        window.location.assign(url_root + "/cib/live/primitives/new");
      }
    },
    {
      label: "<%=h escape_javascript _('New Group') %>",
      icon: "add.png",
      click: function(target) {
        var has_primitives = false;
        $.each(cib.resources, function() {
          if (!this.children) {
            has_primitives = true;
            return false;
          }
        });
        if (has_primitives) {
          window.location.assign(url_root + "/cib/live/groups/new");
        } else {
          error_dialog("<%= escape_javascript _("Can't create group, there are no primitives available.") %>");
        }
      }
    },
    {
      label: "<%=h escape_javascript _('New Clone') %>",
      icon: "add.png",
      click: function(target) {
        var has_primitives = false;
        $.each(cib.resources, function() {
          if (!this.children || (this.children && this.type == "group")) {
            has_primitives = true;
            return false;
          }
        });
        if (has_primitives) {
          window.location.assign(url_root + "/cib/live/clones/new");
        } else {
          error_dialog("<%= escape_javascript _("Can't create clone, there are no primitives or groups available.") %>");
        }
      }
    },
    {
      label: "<%=h escape_javascript _('New Master/Slave') %>",
      icon: "add.png",
      click: function(target) {
        var has_primitives = false;
        $.each(cib.resources, function() {
          if (!this.children || (this.children && this.type == "group")) {
            has_primitives = true;
            return false;
          }
        });
        if (has_primitives) {
          window.location.assign(url_root + "/cib/live/masters/new");
        } else {
          error_dialog("<%= escape_javascript _("Can't create master/slave, there are no primitives or groups available.") %>");
        }
      }
    },
    {
      separator: true
    },
    {
      label: "<%=h escape_javascript _('Edit Constraints') %>",
      icon: "constraints.png",
      click: function(target) {
        window.location.assign(url_root + "/cib/live/constraints");
      }
    }
  ]});
  $(jq("menu::resource")).popupmenu({ iconroot: url_root + "/images/icons/", items: [
    {
      label: "<%=h escape_javascript _('Start') %>",
      icon: "start.png",
      click: function(target) {
        confirm_op(this.label, item_id(target.attr("id")), "resource", "start");
      }
    },
    {
      label: "<%=h escape_javascript _('Stop') %>",
      icon: "stop.png",
      click: function(target) {
        confirm_op(this.label, item_id(target.attr("id")), "resource", "stop");
      }
    },
    {
      label: "<%=h escape_javascript _('Move...') %>",
      icon: "migrate.png",
      click: function(target) {
        var id = item_id(target.attr("id"));
        var html = '<form><select id="migrate-to" size="4" style="width: 100%;">';
        $.each(cib.nodes, function() {
          html += '<option value="' + this.uname + '">' + GETTEXT.resource_migrate_to(this.uname) + "</option>\n";
        });
        html += '<option selected="selected" value="">' + GETTEXT.resource_migrate_away() + "</option>\n";
        html += "</form></select>";
        $("#dialog").html(html);
        // TODO(could): Is there a neater construct for this localized button thing?
        var b = {};
        b[GETTEXT.ok()] = function() {
          perform_op("resource", id, "migrate", "node=" + $("#migrate-to").val());
          $(this).dialog("close");
        };
        b[GETTEXT.cancel()] = function() {
          $(this).dialog("close");
        };
        $("#dialog").dialog("option", {
          title:    GETTEXT.resource_migrate(id),
          buttons:  b
        });
        $("#dialog").dialog("open");
      }
    },
    {
      label: "<%=h escape_javascript _('Drop Relocation Rule') %>",
      icon: "unmigrate.png",
      click: function(target) {
        confirm_op(this.label, item_id(target.attr("id")), "resource", "unmigrate");
      }
    },
    {
      label: "<%=h escape_javascript _('Promote') %>",
      icon: "promote.png",
      click: function(target) {
        confirm_op(this.label, item_id(target.attr("id")), "resource", "promote");
      }
    },
    {
      label: "<%=h escape_javascript _('Demote') %>",
      icon: "demote.png",
      click: function(target) {
        confirm_op(this.label, item_id(target.attr("id")), "resource", "demote");
      }
    },
    {
      label: "<%=h escape_javascript _('Clean Up') %>",
      icon: "cleanup.png",
      click: function(target) {
        confirm_op(this.label, item_id(target.attr("id")), "resource", "cleanup");
      }
    },
    {
      separator: true
    },
    {
      label: "<%=h escape_javascript _('Edit Resource') %>",
      icon: "edit.png",
      click: function(target) {
        var id = item_id(target.attr("id"));
        var type="primitives";
        if (resources_by_id[id].children) {
          type = resources_by_id[id].type + "s"
        }
        window.location.assign(url_root + "/cib/live/" + type + "/" + id + "/edit");
      }
    },
    {
      label: "<%=h escape_javascript _('Delete Resource') %>",
      icon: "remove.png",
      click: function(target) {
        // TODO(must): A lot of this is very similar to perform_op() - consolidate!
        var id = item_id(target.attr("id"));
        var state = "neutral";
        var c = $(jq("resource::" + id));
        if (c.hasClass("ns-active"))        state = "active";
        else if(c.hasClass("ns-inactive"))  state = "inactive";
        else if(c.hasClass("ns-error"))     state = "error";
        else if(c.hasClass("ns-transient")) state = "transient";
        else if(c.hasClass("rs-active"))    state = "active";
        else if(c.hasClass("rs-inactive"))  state = "inactive";
        else if(c.hasClass("rs-error"))     state = "error";
        $(jq("resource::" + id + "::menu")).children(":first").attr("src", url_root + "/images/spinner-16x16-" + state + ".gif");
        $.ajax({ url: url_root + "/main/resource/delete",
          data: "format=json&resource=" + id,
          type: "POST",
          success: function() {
            // Remove spinner (a spinner that stops too early is marginally better than one that never stops)
            $(jq("resource::" + id + "::menu")).children(":first").attr("src", url_root + "/images/icons/properties.png");
          },
          error: function(request) {
            // Remove spinner
            $(jq("resource::" + id + "::menu")).children(":first").attr("src", url_root + "/images/icons/properties.png");
            var json = json_from_request(request);
            if (json) {
              error_dialog(json.error, json.stderr ? json.stderr : null);
            } else {
              if (request.status == 403) {
                // 403 == permission denied
                error_dialog(GETTEXT.err_denied());
              } else {
                error_dialog(GETTEXT.err_unexpected(request.status));
              }
            }
          }
        });
      }
    }
    <% if has_feature?(:crm_history) && is_god? %>
    ,
    {
      separator: true
    },
    {
      label: "<%=h escape_javascript _('View Recent Events...') %>",
      icon: "details.png",
      click: function(target) {
        $("#dialog").html('<div style="text-align: center;">' +
          '<img src="' + url_root + '/images/spinner-32x32.gif" alt="" /></div>');
        // Note that this picks up history of all clone instances (instance ID is dropped).
        // This is necessary else cloned groups show no history (group instance ID doesn't
        // appear in logs).
        $("#dialog").load(url_root + "/cib/" + (cib_file ? cib_file : "live") + "/resources/" + item_id(target.attr("id")) + "/events");
        var b = {};
        b[GETTEXT.close()]   = function() {
          if ($(this).dialog("option", "draggable")) {
            // Reset dialog, but only if it's been changed by the history viewer
            $(this).dialog("option", {
              width: "30em",
              height: "auto",
              position: "center",
              resizable: false,
              draggable: false
            });
          }
          var req = $(this).data("req");
          if (req) req.abort();
          $(this).dialog("close");
        }
        $("#dialog").dialog("option", {
          title:    item_id(target.attr("id")),
          buttons:  b
        });
        $("#dialog").dialog("open");
      }
    }
    <% end %>
  ]});
  $(jq("menu::cluster")).popupmenu({ iconroot: url_root + "/images/icons/", items: [
    {
      label: "<%=h escape_javascript _('Cluster Properties') %>",
      icon: "edit.png",
      click: function(target) {
        window.location.assign(url_root + "/cib/live/crm_config/cib-bootstrap-options/edit");
      }
    },
    {
      label: "<%=h escape_javascript _('Generate hb_report...') %>",
      icon: "properties.png",
      click: function(target) {
        $("#dialog").html('<div style="text-align: center;">' +
          '<img src="' + url_root + '/images/spinner-32x32.gif" alt="" /></div>');
        $("#dialog").load(url_root + "/hb_reports/new");
        var b = {};
        b[GETTEXT.close()] = function() {
          var req = $(this).data("req");
          if (req) req.abort();
          $(this).dialog("close");
        };
        $("#dialog").dialog("option", {
          title:    "<%=h escape_javascript _('Generate hb_report') %>",
          buttons:  b
        });
        $("#dialog").dialog("open");
      }
    },
    {
      label: "<%=h escape_javascript _('Simulator') %>",
      icon: "properties.png",   // TODO(must): Need simulator icon!
      click: function(target) {
        var b = {};
        b[GETTEXT.reset()] = function () {
          $("#sim-get-info").addClass("disabled").removeAttr("href");
          $("#sim-get-in").addClass("disabled").removeAttr("href");
          $("#sim-get-out").addClass("disabled").removeAttr("href");
          $("#sim-get-graph").addClass("disabled").removeAttr("href");
          $("#sim-get-graph-xml").addClass("disabled").removeAttr("href");
          $("#sim-run").attr("disabled", "disabled");
          $("#sim-injections").children().remove();
          $.get(url_root + "/main/sim_reset", function() {
            // TODO(must): spinner in dialog
            cib_source = "sim:in";
            update_cib();
          });
        },
        b[GETTEXT.close()] = function() {
          $(document.body).removeClass("sim");
          $(this).dialog("close");
          hide_status();
          $("#onload-spinner").show();
          cib_source = "live";
          update_cib();
        };
        $("#simulator").dialog("option", {
          title:    "<%=h escape_javascript _('Simulator') %>",
          buttons:  b
        });
        hide_status();
        $("#onload-spinner").show();
        // TODO(should): pretty much a dupe of above reset function; consolidate
        $("#sim-get-info").addClass("disabled").removeAttr("href");
        $("#sim-get-in").addClass("disabled").removeAttr("href");
        $("#sim-get-out").addClass("disabled").removeAttr("href");
        $("#sim-get-graph").addClass("disabled").removeAttr("href");
        $("#sim-get-graph-xml").addClass("disabled").removeAttr("href");
        $("#sim-run").attr("disabled", "disabled");
        $("#sim-injections").children().remove();
        $.get(url_root + "/main/sim_reset", function() {
          cib_source = "sim:in";
          update_cib();
          $(document.body).addClass("sim");
          $("#simulator").dialog("open");
        });
      }
    }
  ]});
});
</script>

